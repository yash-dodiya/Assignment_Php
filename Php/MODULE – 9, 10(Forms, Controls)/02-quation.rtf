{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil Calibri;}{\f2\fnil\fcharset0 Segoe UI;}{\f3\fnil\fcharset2 Symbol;}}
{\colortbl ;\red0\green0\blue0;\red255\green0\blue0;\red0\green0\blue255;}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\sa160\sl259\slmult0\qc\cf1\f0\fs36\lang9 MODULE \f1\endash\f0  9, 10(Forms, Controls)\par

\pard\sa160\sl259\slmult0\fs32\par
\ul\b\fs40 Q-2:Explain -  Eloquent Relationships\fs32\par

\pard{\pntext\f3\'B7\tab}{\*\pn\pnlvlblt\pnf3\pnindent360{\pntxtb\'B7}}\fi-360\sb100\sa100\sl411\slmult0\tx720\ulnone\b0\f2 Eloquent relationships are defined as methods on your Eloquent model classes. Since, like Eloquent models themselves, relationships also serve as powerful query builders, defining relationships as methods provides powerful method chaining and querying capabilities. For example, we may chain additional constraints on this posts relationship:\par
{\pntext\f3\'B7\tab}{\cf2{\field{\*\fldinst{HYPERLINK "https://laravel.com/docs/5.1/eloquent-relationships"}}{\fldrslt{\ul\cf3\cf3\ul One To One}}}}\cf2\f2\fs32\par
{\pntext\f3\'B7\tab}{{\field{\*\fldinst{HYPERLINK "https://laravel.com/docs/5.1/eloquent-relationships"}}{\fldrslt{\ul\cf3\cf3\ul One To Many}}}}\f2\fs32\par
{\pntext\f3\'B7\tab}{{\field{\*\fldinst{HYPERLINK "https://laravel.com/docs/5.1/eloquent-relationships"}}{\fldrslt{\ul\cf3\cf3\ul Many To Many}}}}\f2\fs32\par
{\pntext\f3\'B7\tab}{{\field{\*\fldinst{HYPERLINK "https://laravel.com/docs/5.1/eloquent-relationships"}}{\fldrslt{\ul\cf3\cf3\ul Has Many Through}}}}\f2\fs32\par
{\pntext\f3\'B7\tab}{{\field{\*\fldinst{HYPERLINK "https://laravel.com/docs/5.1/eloquent-relationships"}}{\fldrslt{\ul\cf3\cf3\ul Polymorphic Relations}}}}\f2\fs32\par

\pard\sa160\sl259\slmult0 {{\field{\*\fldinst{HYPERLINK "https://laravel.com/docs/5.1/eloquent-relationships"}}{\fldrslt{\ul\cf3\cf3\ul Many To Many Polymorphic Relations}}}}\f0\fs32\par
\cf1\par
\par
\fs40\par
}
